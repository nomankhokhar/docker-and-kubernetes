// Certainly! Here are 50 Docker commands explained:

// 1. **docker ps**: This command lists all running containers on your system. It provides information such as container ID, image used, command running inside the container, creation time, status, and ports mapping.

// 2. **docker ps -a**: This command lists all containers on your system, whether running or stopped. It provides similar information to `docker ps` but includes stopped containers as well.

// 3. **docker images**: This command lists all the Docker images you have downloaded or created locally. It displays information such as repository, tag, image ID, and creation date.

// 4. **docker pull \<image_name\>**: Use this command to download a Docker image from a repository, such as Docker Hub. Replace \<image_name\> with the name of the image you want to pull.

// 5. **docker run \<image_name\>**: This command creates and starts a new container using the specified image. If the image is not available locally, Docker will automatically pull it from the configured repository.

// 6. **docker run -d \<image_name\>**: Use this command to run a container in detached mode, meaning it runs in the background and does not attach to your terminal.

// 7. **docker run -it \<image_name\> \<command\>**: This command runs a container in interactive mode with a TTY, allowing you to interact with the container's shell. Replace \<command\> with the command you want to execute inside the container.

// 8. **docker stop \<container_id\>**: Use this command to stop a running container. You need to specify the container ID or name.

// 9. **docker start \<container_id\>**: This command starts a stopped container. You need to specify the container ID or name.

// 10. **docker restart \<container_id\>**: Use this command to restart a running or stopped container. You need to specify the container ID or name.

// 11. **docker rm \<container_id\>**: This command removes a stopped container from your system. You need to specify the container ID or name.

// 12. **docker rm -f \<container_id\>**: Use this command to forcefully remove a running container. It stops the container and then removes it.

// 13. **docker rmi \<image_id\>**: This command deletes a Docker image from your local system. You need to specify the image ID or name.

// 14. **docker exec -it \<container_id\> \<command\>**: Use this command to execute a command inside a running container. It opens an interactive session with the container's shell. Replace \<command\> with the command you want to execute.

// 15. **docker logs \<container_id\>**: This command displays the logs generated by a specific container. You need to specify the container ID or name.

// 16. **docker inspect \<container_id\>**: Use this command to retrieve detailed information about a container, including its configuration, networking, and storage.

// 17. **docker inspect \<image_id\>**: This command retrieves detailed information about a Docker image, such as its layers, labels, and environment variables.

// 18. **docker network ls**: This command lists all the Docker networks created on your system. It provides information such as network ID, name, and driver.

// 19. **docker network create \<network_name\>**: Use this command to create a new Docker network. Replace \<network_name\> with the desired name for the network.

// 20. **docker network connect \<network_name\> \<container_id\>**: This command connects a running container to a specific Docker network. You need to specify the network name and the container ID.

// 21. **docker network disconnect \<network_name\> \<container_id\>**: Use this command to disconnect a container from a Docker network. You need to specify the network name and the container ID.

// 22. **docker volume ls**: This command lists all the Docker volumes present on your system. It provides information such as volume name, driver, and mount point.

// 23. **docker volume create \<volume_name\>**: Use this command to create a new Docker volume. Replace \<volume_name\> with the desired name for the volume.

// 24. **docker volume inspect \<volume_name\>**: This command retrieves detailed information about a Docker volume, including its configuration and mount point.

// 25. **docker volume rm \<volume_name\>**: Use this command to remove a Docker volume from your system. You need to specify the volume name.

// 26. **docker-compose up**: This command starts services defined in a `docker-compose.yml` file. It creates and starts containers for each service defined in the file.

// 27. **docker-compose down**: Use this command to stop and remove containers, networks, and volumes created by `docker-compose up`.

// 28. **docker-compose build**: This command builds Docker images based on the `Dockerfile` defined in the `docker-compose.yml` file.

// 29. **docker-compose ps**: Use this command to list the services defined in the `docker-compose.yml` file along with their status.

// 30. **docker-compose logs**: This command displays the logs generated by services defined in the `docker-compose.yml` file.

// 31. **docker-compose exec \<service_name\> \<command\>**: Use this command to execute a command inside a running service container. Replace \<service_name\> with the name of the service and \<command\> with the command you want to execute.

// 32. **docker-compose stop \<service_name\>**: This command stops a specific service defined in the `docker-compose.yml` file.

// 33. **docker-compose start \<service_name\>**: Use this command to start a stopped service defined in the `docker-compose.yml` file.

// 34. **docker-compose restart \<service_name\>**: This command restarts a service defined in the `docker-compose.yml` file.

// 35. **docker-compose pause \<service_name\>**: Use this command to pause a running service defined in the `docker-compose.yml` file.

// 36. **docker-compose unpause \<service_name\>**: This command unpauses a paused service defined in the `docker-compose.yml` file.

// 37. **docker-compose rm \<service_name\>**: Use this command to remove a stopped service container defined in the `docker-compose.yml` file.

// 38. **docker-compose scale \<service_name\>=\<number\>**: This command scales the number of containers for a specific service defined in the `docker-compose.yml` file. Replace \<number\> with the desired number of containers.

// 39. **docker-compose pull**: Use this command to pull the latest images for services defined in the `docker-compose.yml` file.

// 40. **docker system prune**: This command removes all stopped containers, unused networks, and dangling images to reclaim disk space.

// 41. **docker stats**: Use this command to display live resource usage statistics of running containers. It shows CPU, memory, and network usage.

// 42. **docker commit \<container_id\> \<image_name\>**: This command creates a new image based on changes made to a container. You need to specify the container ID and the desired image name.

// 43. **docker build \<path_to_Dockerfile\>**: Use this command to build a Docker image from a `Dockerfile` located at the specified path.

// 44. **docker tag \<image_id\> \<new_image_name\>:\<tag\>**: This command tags a Docker image with a new name and an optional tag. It's useful for versioning and organizing images.

// 45. **docker save \<image_name\>**: Use this command to save a Docker image to a tar archive. You need to specify the image name.

// 46. **docker load**: This command loads a Docker image from a tar archive created with `docker save`.

// 47. **docker export \<container_id\>**: Use this command to export the filesystem of a container as a tar archive. You need to specify the container ID.

// 48. **docker import \<file_path\>**: This command imports the contents of a tar archive as a new Docker image. You need to specify the path to the tar archive.

// 49. **docker version**: Use this command to display the Docker version installed on your system, along with client and server information.

// 50. **docker info**: This command provides detailed information about the Docker installation, including number of containers and images, storage driver, and operating system.

// These commands cover a wide range of Docker operations, from managing containers and images to networking, volumes, and Docker Compose. Understanding and mastering these commands will empower you to efficiently work with Docker containers and images.



// To Uninstall the Docker Engine, CLI, and Containerd packages, use the following command:

// sudo apt-get purge -y docker-engine docker docker.io docker-ce  
// sudo apt-get autoremove -y --purge docker-engine docker docker.io docker-ce  
// sudo umount /var/lib/docker/
// sudo rm -rf /var/lib/docker /etc/docker
// sudo rm /etc/apparmor.d/docker
// sudo groupdel docker
// sudo rm -rf /var/run/docker.sock
// sudo rm -rf /usr/bin/docker-compose




// dpkg -l | grep -i docker
// sudo apt remove --purge docker-ce docker-ce-cli containerd.io
// sudo rm -rf /var/lib/docker
// sudo rm -rf /var/lib/containerd
// sudo apt autoremove -y
// sudo apt autoclean